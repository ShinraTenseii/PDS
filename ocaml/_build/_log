### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules main.ml > main.ml.depends # cached
# Target: ASD.ml.depends, tags: { extension:ml, file:ASD.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules ASD.ml > ASD.ml.depends # cached
# Target: ASD.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ASD.cmo, file:ASD.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o ASD.cmo ASD.ml # cached
# Target: codegen.ml.depends, tags: { extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules codegen.ml > codegen.ml.depends # cached
# Target: llvm.ml.depends, tags: { extension:ml, file:llvm.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules llvm.ml > llvm.ml.depends # cached
# Target: llvm.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:llvm.cmo, file:llvm.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o llvm.cmo llvm.ml # cached
# Target: symbolTable.ml.depends, tags: { extension:ml, file:symbolTable.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules symbolTable.ml > symbolTable.ml.depends # cached
# Target: symbolTable.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:symbolTable.cmo, file:symbolTable.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o symbolTable.cmo symbolTable.ml # cached
# Target: utils.ml.depends, tags: { extension:ml, file:utils.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules utils.ml > utils.ml.depends # cached
# Target: utils.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:utils.cmo, file:utils.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o utils.cmo utils.ml # cached
# Target: codegen.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o codegen.cmo codegen.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules lexer.ml > lexer.ml.depends # cached
# Target: token.ml.depends, tags: { extension:ml, file:token.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules token.ml > token.ml.depends # cached
# Target: token.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:token.cmo, file:token.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o token.cmo token.ml # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o lexer.cmo lexer.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -pp camlp4o -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o parser.cmo parser.ml # cached
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -I /usr/lib64/ocaml -pp camlp4o -o main.cmo main.ml # cached
# Target: ASD.cmx, tags: { compile, extension:cmx, extension:ml, file:ASD.cmx, file:ASD.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o ASD.cmx ASD.ml # cached
# Target: llvm.cmx, tags: { compile, extension:cmx, extension:ml, file:llvm.cmx, file:llvm.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o llvm.cmx llvm.ml # cached
# Target: symbolTable.cmx, tags: { compile, extension:cmx, extension:ml, file:symbolTable.cmx, file:symbolTable.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o symbolTable.cmx symbolTable.ml # cached
# Target: utils.cmx, tags: { compile, extension:cmx, extension:ml, file:utils.cmx, file:utils.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o utils.cmx utils.ml # cached
# Target: codegen.cmx, tags: { compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o codegen.cmx codegen.ml # cached
# Target: token.cmx, tags: { compile, extension:cmx, extension:ml, file:token.cmx, file:token.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o token.cmx token.ml # cached
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o lexer.cmx lexer.ml # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o parser.cmx parser.ml # cached
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -I /usr/lib64/ocaml -pp camlp4o -o main.cmx main.ml # cached
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt -I /usr/lib64/ocaml /usr/lib64/ocaml/str.cmxa ASD.cmx llvm.cmx symbolTable.cmx utils.cmx codegen.cmx token.cmx lexer.cmx parser.cmx main.cmx -o main.native # cached
# Compilation successful.
